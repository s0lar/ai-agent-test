package main

import (
	"bufio"
	"bytes"
	"crypto/tls"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/joho/godotenv"
)

type Team struct {
	Name        string            `json:"name"`
	Keywords    []string          `json:"keywords"`
	Exclusions  []string          `json:"exclusions"`
	Tags        []string          `json:"tags"`
	Description string            `json:"description"`
	Contacts    map[string]string `json:"contacts"`
	Examples    []string          `json:"examples"`
}

type KnowledgeBase struct {
	Teams             []Team            `json:"teams"`
	ResponseTemplates map[string]string `json:"response_template"`
}

type DeepSeekRequest struct {
	Model    string    `json:"model"`
	Messages []Message `json:"messages"`
}

type Message struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

var (
	kb          KnowledgeBase
	deepSeekURL = "https://api.deepseek.com/v1/chat/completions"
)

func main() {
	// –ó–∞–≥—Ä—É–∑–∫–∞ .env
	if err := godotenv.Load(); err != nil {
		log.Println("‚ö†Ô∏è .env –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω:", err)
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
	if err := loadKnowledgeBase("knowledge_base.json"); err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:", err)
	}

	// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	reader := bufio.NewReader(os.Stdin)
	fmt.Println("ü§ñ AI-–∞–≥–µ–Ω—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ (JSON+RAG)")
	fmt.Println("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ '–≤—ã—Ö–æ–¥'):")

	for {
		fmt.Print("> ")
		query, _ := reader.ReadString('\n')
		query = strings.TrimSpace(query)

		if shouldExit(query) {
			break
		}

		processQuery(query)
	}
}

func loadKnowledgeBase(filename string) error {
	data, err := ioutil.ReadFile(filename)
	if err != nil {
		return err
	}

	if err := json.Unmarshal(data, &kb); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
	}

	log.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–º–∞–Ω–¥: %d", len(kb.Teams))
	return nil
}

func processQuery(query string) {
	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è DeepSeek
	context := struct {
		KnowledgeBase KnowledgeBase `json:"knowledge_base"`
		UserQuery     string        `json:"user_query"`
	}{
		KnowledgeBase: kb,
		UserQuery:     query,
	}

	contextJSON, _ := json.MarshalIndent(context, "", "  ")
	fullPrompt := fmt.Sprintf(`
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û —ç—Ç—É –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:
%s

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
- –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ: %s
- –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å: %s`,
		string(contextJSON),
		kb.ResponseTemplates["success"],
		kb.ResponseTemplates["unknown"])

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ DeepSeek
	response, err := askDeepSeek(fullPrompt)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞:", err)
		return
	}

	fmt.Println("\nü§ñ –û—Ç–≤–µ—Ç:")
	fmt.Println(response)
}

func askDeepSeek(prompt string) (string, error) {
	apiKey := os.Getenv("DEEPSEEK_API_KEY")
	if apiKey == "" {
		return "", fmt.Errorf("DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	requestBody := DeepSeekRequest{
		Model: "deepseek-chat",
		Messages: []Message{
			{
				Role:    "system",
				Content: "–¢—ã –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.",
			},
			{
				Role:    "user",
				Content: prompt,
			},
		},
	}

	jsonBody, _ := json.Marshal(requestBody)
	req, _ := http.NewRequest("POST", deepSeekURL, bytes.NewBuffer(jsonBody))
	req.Header.Set("Authorization", "Bearer "+apiKey)
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{InsecureSkipVerify: true}, // –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∞!
		},
		Timeout: 30 * time.Second,
	}
	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	body, _ := ioutil.ReadAll(resp.Body)
	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("API –æ—à–∏–±–∫–∞ %d: %s", resp.StatusCode, string(body))
	}

	var result struct {
		Choices []struct {
			Message struct {
				Content string `json:"content"`
			} `json:"message"`
		} `json:"choices"`
	}

	if err := json.Unmarshal(body, &result); err != nil {
		return "", err
	}

	if len(result.Choices) == 0 {
		return "", fmt.Errorf("–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API")
	}

	return result.Choices[0].Message.Content, nil
}

func shouldExit(query string) bool {
	return strings.ToLower(query) == "–≤—ã—Ö–æ–¥"
}
